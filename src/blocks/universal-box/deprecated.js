/**
 * ### Block migration mechanism ###
 *
 * === How WP does it ===
 * Checks block generated by save() against old save() patterns and attributes stored in deprecated[]
 * Can be configured to proceed in reverse sequence from one upgrade to the next until complete.
 *
 * === Custom deprecation method ===
 * Compare output of save function with saved block HTML.
 * Retrieve old HTML via filter.
 * Each breaking change should have a new blockVersion
 *
 * The deprecation check only checks for new or deleted root level attributes.
 *
 * Examples
 *
 * @see https://github.com/studiopress/atomic-blocks/tree/develop/src/blocks/block-accordion/deprecated
 * @see https://github.com/gambitph/Stackable/tree/master/src/block/container
 *
 * ! Note: this file should only handle changes to root attributes. Attribute props should be handled in edit.updateAttributes()
 *
 *  //#Todo: Block version is updated in edit.updateAttributes(). This may be a mistake triggering the block to be run through the deprecated mechanism many times.
 */

import _ from 'lodash'

import SimpleStore from '@lib/simple-store-2'
// import useClassNames from '@framework/modules/-class-names'
import {
	// createObjectStructure,
	objectFilterEmpty,
	objectReduce,
	// arrayFind,
} from '@framework/utils'

import {
	blockSetup,
	blockAttributes,
} from './settings'

// import save from './save'

import { renderToString } from '@wordpress/element'

// ### ### ### ### ### ### ### ### ###
//  === The One True Catch-all v2 ===
// ### ### ### ### ### ### ### ### ###
const catchAll = {
	// Current attributes
	attributes: blockAttributes,

	/**
	 * Render this block version for comparison by WP
	 */
	save( props ) {
		const { attributes } = props
		const { blockId, blockVersion, blockType } = attributes

		_L1( `[${ blockId }] Running block update` )
		_info( `Current block version: ${ blockVersion }` )
		_log( 'Attributes:', attributes )

		// Get existing classes and styles from saved HTML
		// This is retrieved with the 'blocks.getBlockAttributes' filter
		const oldHtml = SimpleStore( blockId ).get( 'oldHtml' )

		let blockPattern, dom, blockNode

		if ( oldHtml ) {
			_info( 'Previous saved block HTML: ', oldHtml )
			dom = new DOMParser().parseFromString( oldHtml, 'text/html' )
			blockNode = dom.body.children[ 0 ]
		}

		if ( blockNode ) {
			const Block = blockNode.localName || blockType || 'div'

			// Reconstruct the old block as JSX to ensure that this block compare function will match the deprecated block provided by WP.
			// Render innerHTML as JSX
			blockPattern = <Block
				className={ blockNode.className }
				id={ blockNode.id }
				dangerouslySetInnerHTML={ { __html: blockNode.innerHTML } }
			/>
		}

		// const saveContent = save( props )
		// _log( 'saveContent', renderToString( saveContent ) )

		_info( 'Updated block HTML:', renderToString( blockPattern ) )

		return blockPattern
	},

	/**
	 * If block matches, start attribute migration
	 */
	migrate( attributes ) {
		return migrateBlock( attributes )
	},
}

const deprecated = [ catchAll ]

/**
 * Deprecated block migrate logic processor
 *
 * @param {*} attributes
 */
function migrateBlock( attributes ) {
	const newVersion = blockSetup.blockVersion
	const { blockId, blockVersion } = attributes

	_info( `[${ blockId }] Migrating block from v${ blockVersion } -> v${ newVersion }` )
	_log( { oldAttributes: attributes } )

	// Remove collected detrius
	attributes.className = ''

	// Get new block structure from blockAttributes
	const defaults = objectReduce( blockAttributes, { cloneResult: true }, ( value ) => {
		return value && value.default
	} )

	// Merge old attributes with new
	attributes = _.merge( defaults, attributes )

	// Remove undefined
	attributes = objectFilterEmpty( attributes )

	_info( `[${ blockId }] Migration process complete.` )

	_log( { newAttributes: attributes } )

	return attributes
}

export default deprecated
